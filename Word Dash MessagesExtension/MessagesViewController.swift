//
//  MessagesViewController.swift
//  Word Dash MessagesExtension
//
//  Created by Uma Bahl on 6/15/25.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    let playButton = UIButton(type: .system)
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Setup play button
        playButton.setTitle("Play Game", for: .normal)
        playButton.titleLabel?.font = .boldSystemFont(ofSize: 20)
        playButton.translatesAutoresizingMaskIntoConstraints = false
        playButton.addTarget(self, action: #selector(playGameTapped), for: .touchUpInside)

        view.addSubview(playButton)
        
        NSLayoutConstraint.activate([
            playButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            playButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
        
    }
    
    @objc func playGameTapped() {
        guard let conversation = activeConversation else { return }

        // Optionally attach a custom URL with game state (encoded later)
        var components = URLComponents()
        components.queryItems = [
            URLQueryItem(name: "game", value: "new")
        ]

        let layout = MSMessageTemplateLayout()
        layout.caption = "Let's play Word Dash!"

        let message = MSMessage(session: conversation.selectedMessage?.session ?? MSSession())
        message.layout = layout
        message.url = components.url

        conversation.insert(message) { error in
            if let error = error {
                print("Failed to insert message: \(error)")
            }
        }
    }
    
    override func didBecomeActive(with conversation: MSConversation) {
        super.didBecomeActive(with: conversation)

        guard presentationStyle == .expanded else { return }

        if let url = conversation.selectedMessage?.url,
           let components = URLComponents(url: url, resolvingAgainstBaseURL: false),
           let gameQuery = components.queryItems?.first(where: { $0.name == "game" })?.value,
           gameQuery == "new" {
            // Show your word grid
            print("game")
            
            playButton.removeFromSuperview()
            
            let label = UILabel()
            label.text = "Word Dash Started!"
            label.textColor = .black
            label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
            label.translatesAutoresizingMaskIntoConstraints = false
            label.textAlignment = .center

            view.addSubview(label)

            NSLayoutConstraint.activate([
                label.centerXAnchor.constraint(equalTo: view.centerXAnchor),
                label.centerYAnchor.constraint(equalTo: view.centerYAnchor)
            ])
        }
    
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
